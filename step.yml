#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  upload-asset-github-release
summary: |
  Upload Bitrise assets to an already existant Github Release
description: |
  Upload Bitrise assets to an already existant Github Release
website: https://github.com/invoice-simple/bitrise-step-upload-asset-github-release
source_code_url: https://github.com/invoice-simple/bitrise-step-upload-asset-github-release
support_url: https://github.com/invoice-simple/bitrise-step-upload-asset-github-release/issues

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
# project_type_tags:
#   - ios
#   - macos
#   - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic
#   - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - artifact-info

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake
version: 1.0.2
toolkit:
  bash:
    entry_file: step.sh

inputs:
  - deploy_path: $BITRISE_DEPLOY_DIR
    opts:
      title: "Deploy directory or file path"
      summary: Specify the directory or file path which will be deployed.
      description: |
        If the specified path is a directory, then every file in the specified directory, excluding sub-directories, will be deployed.

        If you specify a file path, then only the specified file will be deployed.
      is_required: true
  - github_repo: "$GITHUB_REPOSITORY_PATH"
    opts:
      title: "GitHub Repository Path"
      summary: The GitHub repository in owner/repo format
      description: |
        Specify the GitHub repository where the release is located.
        Format: owner/repository (e.g., "mycompany/myproject")
      is_required: true

  - github_token: "$GITHUB_ACCESS_TOKEN"
    opts:
      title: "GitHub Personal Access Token"
      summary: GitHub token with repo access permissions
      description: |
        Personal Access Token for GitHub API authentication.
        The token must have 'repo' scope to access private repositories and upload release assets.
        You can create a token at: https://github.com/settings/tokens
      is_required: true
      is_sensitive: true

  - tag_id: "$BITRISE_GIT_TAG"
    opts:
      title: "Release Tag"
      summary: The git tag name of the release
      description: |
        Specify the tag name of the GitHub release where assets will be uploaded.
        The release must already exist for the specified tag.
        Example: "v1.0.0" or "release-2023.1"
      is_required: true
